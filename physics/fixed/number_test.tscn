[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

func _ready():
	TestFromInt()
	TestToInt()
	TestFromFloat()
	TestToFloat()
	TestAdd()
	TestSub()
	TestMul()
	TestDiv()
	TestAbs()
	TestClamp()
	TestSqrt()
	TestMin()
	TestMax()
	print(\"done\")

func TestFromInt():
	var cases = [
		[1, number.ONE],
		[1 << number.M, number.MAX],
		[-(1 << number.M) - 1, number.MIN],
	]
	for c in cases:
		var got = number.FromInt(c[0])
		if got != c[1]:
			print(\"FromInt(%s) == %s, want %s\" % [c[0], got, c[1]])

func TestToInt():
	var cases = [
		[number.ONE, 1]
	]
	for c in cases:
		var got = number.ToInt(c[0])
		if got != c[1]:
			print(\"ToInt(%s) == %s, want %s\" % [c[0], got, c[1]])

func TestFromFloat():
	var cases = [
		[1.0, number.ONE],
		[float(1 << number.M), number.MAX],
		[float(-(1 << number.M) - 1), number.MIN],
		[float(pow(0.5, number.N + 1)), number.EPSILON],
	]
	for c in cases:
		var got = number.FromFloat(c[0])
		if got != c[1]:
			print(\"FromFloat(%s) == %s, want %s\" % [c[0], got, c[1]])

func TestToFloat():
	var cases = [
		[number.ONE, 1.0],
	]
	for c in cases:
		var got = number.ToFloat(c[0])
		if got != c[1]:
			print(\"ToFloat(%s) == %s, want %s\" % [c[0], got, c[1]])

func TestAdd():
	var cases = [
		[number.ONE, number.ONE, number.ONE * 2],
		[number.MAX, number.EPSILON, number.MAX],
		[number.MIN, -number.EPSILON, number.MIN],
	]
	for c in cases:
		var got = number.Add(c[0], c[1])
		if got != c[2]:
			print(\"Add(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestSub():
	var cases = [
		[number.ONE, number.ONE, 0],
		[number.MAX, -number.EPSILON, number.MAX],
		[number.MIN, number.EPSILON, number.MIN],
	]
	for c in cases:
		var got = number.Sub(c[0], c[1])
		if got != c[2]:
			print(\"Sub(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestMul():
	var cases = [
		[number.ONE, number.ONE, number.ONE],
		[number.MAX, number.ONE + number.EPSILON, number.MAX],
		[number.MIN, number.ONE + number.EPSILON, number.MIN],
		[number.EPSILON, number.ONE - number.EPSILON, number.EPSILON],
		[-number.EPSILON, number.ONE - number.EPSILON, -number.EPSILON],
	]
	for c in cases:
		var got = number.Mul(c[0], c[1])
		if got != c[2]:
			print(\"Mul(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestDiv():
	var cases = [
		[number.ONE, number.ONE, number.ONE],
		[number.MAX, number.ONE - number.EPSILON, number.MAX],
		[number.MIN, number.ONE - number.EPSILON, number.MIN],
		[number.EPSILON, number.ONE + number.EPSILON, number.EPSILON],
		[-number.EPSILON, number.ONE + number.EPSILON, -number.EPSILON],
	]
	for c in cases:
		var got = number.Div(c[0], c[1])
		if got != c[2]:
			print(\"Div(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestAbs():
	var cases = [
		[number.ONE, number.ONE],
		[-number.ONE, number.ONE],
		[number.MIN, number.MAX],
	]
	for c in cases:
		var got = number.Abs(c[0])
		if got != c[1]:
			print(\"Abs(%s) == %s, want %s\" % [c[0], got, c[1]])

func TestClamp():
	var cases = [
		[number.ONE, number.ONE * 2, number.ONE * 3, number.ONE * 2],
		[number.ONE * 3, number.ONE, number.ONE * 2, number.ONE * 2],
		[number.ONE * 2, number.ONE, number.ONE * 3, number.ONE * 2],
	]
	for c in cases:
		var got = number.Clamp(c[0], c[1], c[2])
		if got != c[3]:
			print(\"Clamp(%s, %s, %s) == %s, want %s\" % [c[0], c[1], c[2], got, c[3]])

func TestSqrt():
	var cases = [
		[number.ONE, number.ONE],
		[number.ONE * 4, number.ONE * 2],
	]
	for c in cases:
		var got = number.Sqrt(c[0])
		if got != c[1]:
			print(\"Sqrt(%s) == %s, want %s\" % [c[0], got, c[1]])
			
func TestMin():
	var cases = [
		[number.ONE, number.ONE * 2, number.ONE],
	]
	for c in cases:
		var got = number.Min(c[0], c[1])
		if got != c[2]:
			print(\"Min(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestMax():
	var cases = [
		[number.ONE, number.ONE * 2, number.ONE * 2],
	]
	for c in cases:
		var got = number.Max(c[0], c[1])
		if got != c[2]:
			print(\"Max(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])"

[node name="number_test" type="Node"]

script = SubResource( 1 )


