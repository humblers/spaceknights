[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

var Vec2 = preload(\"res://fixed/vec2_dic.gd\")

func _ready():
	TestAdd()
	TestSub()
	TestMul()
	TestDiv()
	TestDot()
	TestCross()
	TestLengthSquared()
	TestLength()
	TestNormalized()
	TestTruncated()
	print(\"done\")
	
func TestAdd():
	var cases = [
		[Vec2.New(number.ONE, 0), Vec2.New(0, number.ONE), Vec2.New(number.ONE, number.ONE)],
	]
	for c in cases:
		var got = Vec2.Add(c[0], c[1])
		if not Vec2.Equal(got, c[2]):
			print(\"Add(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestSub():
	var cases = [
		[Vec2.New(number.ONE, number.ONE), Vec2.New(0, number.ONE), Vec2.New(number.ONE, 0)],
	]
	for c in cases:
		var got = Vec2.Sub(c[0], c[1])
		if not Vec2.Equal(got, c[2]):
			print(\"Sub(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestMul():
	var cases = [
		[Vec2.New(number.ONE, number.ONE), number.ONE * 2, Vec2.New(number.ONE * 2, number.ONE * 2)],
	]
	for c in cases:
		var got = Vec2.Mul(c[0], c[1])
		if not Vec2.Equal(got, c[2]):
			print(\"Mul(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])


func TestDiv():
	var cases = [
		[Vec2.New(number.ONE * 2, number.ONE * 2), number.ONE * 2, Vec2.New(number.ONE, number.ONE)],
	]
	for c in cases:
		var got = Vec2.Div(c[0], c[1])
		if not Vec2.Equal(got, c[2]):
			print(\"Div(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])


func TestDot():
	var cases = [
		[Vec2.New(number.ONE, 0), Vec2.New(0, number.ONE), 0],
	]
	for c in cases:
		var got = Vec2.Dot(c[0], c[1])
		if got != c[2]:
			print(\"Dot(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestCross():
	var cases = [
		[Vec2.New(number.ONE, 0), Vec2.New(0, number.ONE), number.ONE],
	]
	for c in cases:
		var got = Vec2.Cross(c[0], c[1])
		if got != c[2]:
			print(\"Cross(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])

func TestLengthSquared():
	var cases = [
		[Vec2.New(number.ONE * 3, number.ONE * 4), number.ONE * 25],
	]
	for c in cases:
		var got = Vec2.LengthSquared(c[0])
		if got != c[1]:
			print(\"LengthSquared(%s) == %s, want %s\" % [c[0], got, c[1]])

func TestLength():
	var cases = [
		[Vec2.New(number.ONE * 3, number.ONE * 4), number.ONE * 5],
	]
	for c in cases:
		var got = Vec2.Length(c[0])
		if got != c[1]:
			print(\"Length(%s) == %s, want %s\" % [c[0], got, c[1]])

func TestNormalized():
	var cases = [
		[Vec2.New(number.ONE / 2, 0), Vec2.New(number.ONE, 0)],
		[Vec2.New(number.ONE * 2, 0), Vec2.New(number.ONE, 0)],
	]
	for c in cases:
		var got = Vec2.Normalized(c[0])
		if not Vec2.Equal(got, c[1]):
			print(\"Normalized(%s) == %s, want %s\" % [c[0], got, c[1]])

func TestTruncated():
	var cases = [
		[Vec2.New(number.ONE / 2, 0), number.ONE, Vec2.New(number.ONE / 2, 0)],
		[Vec2.New(number.ONE * 2, 0), number.ONE, Vec2.New(number.ONE, 0)],
	]
	for c in cases:
		var got = Vec2.Truncated(c[0], c[1])
		if not Vec2.Equal(got, c[2]):
			print(\"Truncated(%s, %s) == %s, want %s\" % [c[0], c[1], got, c[2]])
"

[node name="vec2_test" type="Node"]

script = SubResource( 1 )


