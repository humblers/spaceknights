[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

const SCALE = 10
const FRAME_PER_STEP = 6

var frame = 0
var elapsed = 0

var width = ProjectSettings.get(\"display/window/size/width\")
var height = ProjectSettings.get(\"display/window/size/height\")

var params = {
	\"dt\": Q.Div(Q.ONE, Q.FromInt(10)),
	\"penetrationPercent\": Q.Div(Q.FromInt(4), Q.FromInt(10)),
	\"penetrationSlop\": Q.Div(Q.FromInt(5), Q.FromInt(100)),
#	\"gravity_y\": Q.FromInt(8),
}
var w = physics.NewWorld(params)

func _ready():
	set_process_input(true)
	set_physics_process(true)
	set_process(true)
	var b = physics.AddBox(
		w,
		0,
		PixelToWorldScalar(500),
		PixelToWorldScalar(1500),
		PixelToWorldScalar(400),
		PixelToWorldScalar(20)
	)
	var n = preload(\"res://box.tscn\").instance()
	n.width = 400
	n.height = 20
	n.color = Color(0, 0, 1)
	add_child(n)
	b.node = n

func _input(event):
	if event is InputEventMouseButton and not event.pressed:
		if event.button_index == BUTTON_LEFT:
			var b = physics.AddCircle(
				w,
				PixelToWorldScalar(10),
				PixelToWorldScalar(event.position.x),
				PixelToWorldScalar(event.position.y),
				PixelToWorldScalar(30)
			)
			var n = preload(\"res://circle.tscn\").instance()
			n.radius = 30
			add_child(n)
			b.node = n
		if event.button_index == BUTTON_RIGHT:
			var b = physics.AddBox(
				w,
				PixelToWorldScalar(10),
				PixelToWorldScalar(event.position.x),
				PixelToWorldScalar(event.position.y),
				PixelToWorldScalar(30),
				PixelToWorldScalar(30)
			)
			var n = preload(\"res://box.tscn\").instance()
			n.width = 30
			n.height = 30
			add_child(n)
			b.node = n

func _process(delta):
	elapsed += delta
	var t = elapsed / (float(FRAME_PER_STEP) / Engine.iterations_per_second)
	for b in w.bodies:
		var prev = Vector2(WorldToPixelScalar(b.prev_pos_x), WorldToPixelScalar(b.prev_pos_y))
		var curr = Vector2(WorldToPixelScalar(b.pos_x), WorldToPixelScalar(b.pos_y))
		b.node.position = prev.linear_interpolate(curr, t)
		if b.node.position.x < 0 or b.node.position.x > width or b.node.position.y < 0 or b.node.position.y > height:
			physics.RemoveBody(w, b)
			b.node.queue_free()

func _physics_process(delta):
	if frame % FRAME_PER_STEP == 0:
		physics.Step(w)
		elapsed = 0
	frame += 1

func PixelToWorldScalar(s):
	return Q.FromInt(int(s) / SCALE)

func WorldToPixelScalar(s):
	return Q.ToFloat(s) * SCALE

#func PixelToWorldVector(p):
#	return vec2.new(PixelToWorldScalar(p.x), PixelToWorldScalar(p.y))
#
#func WorldToPixelPosition(p):
#	return Vector2(WorldToPixelScalar(p.X), WorldToPixelScalar(p.Y))"

[node name="Node" type="Node" index="0"]

script = SubResource( 1 )


