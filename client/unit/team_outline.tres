[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;

uniform bool damaged = false;
uniform bool frozen = false;

uniform float outline_width=2.0;
uniform vec4 outline_color: hint_color;

void fragment(){
	vec4 col = texture(TEXTURE, UV);
	vec2 ps = TEXTURE_PIXEL_SIZE;
	float a;
	float maxa=col.a;
	float mina=col.a;
	a=texture(TEXTURE, UV+vec2(0,-outline_width)*ps).a;
	maxa=max(a,maxa);
	mina=min(a,mina);
	a=texture(TEXTURE, UV+vec2(0,outline_width)*ps, 0.0).a;
	maxa=max(a,maxa);
	mina=min(a,mina);
	a=texture(TEXTURE, UV+vec2(-outline_width,0)*ps, 0.0).a;
	maxa=max(a,maxa);
	mina=min(a,mina);
	a=texture(TEXTURE, UV+vec2(outline_width,0)*ps, 0.0).a;
	maxa=max(a,maxa);
	mina=min(a,mina);
	
	COLOR=mix(col, outline_color, maxa-mina);

	if (frozen) {
	    if (sin(TIME * 10.0) > 0.0) {
	        COLOR = COLOR * 3.0;
	    } else {
	        COLOR = COLOR * 2.7;
	    }
	}

	if (damaged) {
	    COLOR.r = texture(TEXTURE, UV).r + 0.3;
	}
}"

[resource]

render_priority = 0
shader = SubResource( 1 )
shader_param/damaged = false
shader_param/frozen = false
shader_param/outline_width = 1.0
shader_param/outline_color = Color( 0.224042, 0.107849, 0.890625, 1 )
_sections_unfolded = [ "shader_param" ]

