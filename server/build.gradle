import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import org.gradle.internal.logging.text.StyledTextOutput;
import org.gradle.internal.logging.text.StyledTextOutputFactory;
import static org.gradle.internal.logging.text.StyledTextOutput.Style;

def targetMap = [
    'game' : 'game', 
    'lobby' : 'lobby'
]

task link() {
    for (String path : ['gradle', 'gradlew', 'gradlew.bat']) {
        Path org = getProject().getProjectDir().toPath().resolve(path)
        targetMap.each { k, targetDir ->
            Path target = getProject().getProjectDir().toPath().resolve(targetDir).resolve(path)
            println('create symlink ' + org + ' -> ' + target)
            Files.deleteIfExists(target)
            Files.createSymbolicLink(target, org)
       }
    }
}

task buildServer(dependsOn: 'link') {
    String gradle_command = './gradlew'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        gradle_command = 'gradlew.bat'
    }
    targetMap.each { k, targetDir ->
        ProcessBuilder pb = new ProcessBuilder().command(gradle_command, 'build').directory(getProject().getProjectDir().toPath().resolve(targetDir).toFile())
        BufferedReader stdReader = 
                        new BufferedReader(new InputStreamReader(pb.start().getInputStream()));
        BufferedReader errReader = 
                        new BufferedReader(new InputStreamReader(pb.start().getErrorStream()));
        StringBuilder builder = new StringBuilder();
        String line = null
        while ( (line = stdReader.readLine()) != null ) {
           builder.append(line)
           builder.append(System.getProperty("line.separator"))
        }
        println(builder.toString())
        builder = new StringBuilder();
        while ( (line = errReader.readLine()) != null ) {
           builder.append(line)
           builder.append(System.getProperty("line.separator"))            
        }
        def out = services.get(StyledTextOutputFactory).create("blah")
        out.withStyle(Style.Info).println(builder.toString())
    }
}

task copyExecutable(type: Copy, dependsOn: 'buildServer') {
    targetMap.each { key, path ->
        from ("${path}/.gogradle") {
            include "*${key}"
        }
    }
    into 'bin'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        rename('(.*)_(.*)_(.*)', '$1_$3.exe')
    }
}

task run(dependsOn: 'copyExecutable') {
    doLast {
        targetMap.each { key, v -> 
            ProcessBuilder pb = new ProcessBuilder().directory(getProject().getProjectDir().toPath().resolve('bin').toFile())
            String os = System.properties['os.name'].toLowerCase()
            if (os.contains('windows')) {
                pb.command('cmd.exe', '/c', 'start', "windows_${key}.exe")
            } else {
                //below script not proper working on mac
                //        if (os.contains('mac')) {
                //            pb.command("./darwin_amd64_${key}")
                //        } 
                println('unknown to run binary!!')
            }
            pb.start()
        }
    }
}
